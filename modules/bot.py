from telebot.apihelper import ApiTelegramException
from modules.user import User
from telebot.types import ReplyKeyboardRemove, InlineKeyboardMarkup, Message
from telebot import TeleBot
from modules.keyboards import Keyboards
import modules.kyc as kyc
from re import fullmatch
from modules.wallets import Erc, Trc, Bsc
from configparser import ConfigParser
from modules.sheets import Sheet
from requests import get
import modules.admin as admin

config = ConfigParser()
config.read('config.ini')

tron = Trc()
erc = Erc(config['blockchain']['erc'])
bsc = Bsc(config['blockchain']['bsc'])


class WalletBot:
    def __init__(self):
        self.bot = TeleBot(token=config['telegram']['wallets_token'], parse_mode='HTML')

    def send_wallet(self, network, currency, private, address, amount):
        text = '<b>–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫</b>\n\n' \
               f'<b>–ê–¥—Ä–µ—Å:</b> {address}\n\n' \
               f'<b>–°–µ—Ç—å:</b> {network}\n' \
               f'<b>–ú–æ–Ω–µ—Ç–∞:</b> {currency.upper()}\n' \
               f'<b>–û–∂–∏–¥–∞–µ—Ç—Å—è:</b> {amount:.2f} {currency.upper()}\n\n' \
               f'<b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞</b>: <code>{private}</code>'

        self.bot.send_message(chat_id=int(config['telegram']['wallets_allowed']), text=text)


class Bot:
    def __init__(self, bot: TeleBot):
        self.bot: TeleBot = bot
        self.keyboards = Keyboards()
        self.wallets = WalletBot()

        self.busy = False

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
    def reload_user(self, user: User):
        user.update_data({})
        user.update_status('menu')

    # –û—Ç–º–µ–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –±–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    def cancel_action(self, user):
        self.reload_user(user)
        self.remove_keyboard(user)
        text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
        keyboard = self.keyboards.back_to_menu
        self.send_message(user, text=text, reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç –µ–≥–æ
    def remove_keyboard(self, user: User):
        m = self.send_message(user=user, text='!', reply_markup=ReplyKeyboardRemove())
        self.delete_message(user, m)

    # –£–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    def delete_old_messages(self, user: User):
        for message in user.messages:
            self.delete_message(user, chat_id=user.id, message_id=message)
        user.clean_messages()

    # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ. –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–º–µ–Ω—è–µ—Ç –µ–≥–æ —Ç–µ–∫—Å—Ç –Ω–∞ "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ"
    def delete_message(self, user: User, message: Message = None, chat_id=None, message_id=None):
        if not message and not (chat_id or message_id):
            return

        if message:
            chat_id = message.chat.id,
            message_id = message.id

        if message_id in user.messages:
            user.remove_message(message_id)

        try:
            self.bot.delete_message(chat_id=chat_id, message_id=message_id)
        except ApiTelegramException as e:
            if e.result_json['description'] in ("Bad Request: message can't be deleted for everyone", "Bad Request: message can't be edited"):
                if message.content_type == 'text':
                    self.bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, text='–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ')
                else:
                    self.bot.edit_message_caption(chat_id=message.chat.id, message_id=message.id, caption='–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏, –µ—Å–ª–∏ –≤ –Ω—ë–º –µ—Å—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ id –≤ –ë–î
    def send_message(self, user: User, **kwargs):
        m = self.bot.send_message(chat_id=user.id, **kwargs)
        if isinstance(kwargs.get('reply_markup'), InlineKeyboardMarkup):
            user.add_message(m.id)
        return m

    # –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°—Ç–∞–≤–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    def cancel_order(self, user, message: Message):
        account_id = user.data['account_id']
        self.reload_user(user)
        text = '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ'
        keyboard = self.keyboards.generate_back_to_account_button(account_id=account_id)
        if message.from_user.is_bot:
            self.edit_message(user, message, text=text, reply_markup=keyboard)
        else:
            self.remove_keyboard(user)
            self.send_message(user, text=text, reply_markup=keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ. –ï—Å–ª–∏ –Ω–µ—Ç - —É–¥–∞–ª—è–µ—Ç –∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –Ω–æ–≤–æ–µ
    def edit_message(self, user: User, message: Message, **kwargs):
        if message.content_type == 'text':
            self.bot.edit_message_text(chat_id=message.chat.id, message_id=message.id, **kwargs)
        else:
            user.remove_message(message.id)
            self.send_message(user, **kwargs)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    def send_menu(self, user: User):
        admin = user.is_admin
        if not admin:
            text = '<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†</b>\n\n' \
                   '' \
                   '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å KYC—ã –æ—Ç–ª–∏—á–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ :)'
        else:
            text = '<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>'
        keyboard = self.keyboards.menu_users(config['telegram']['support_url']) if not admin else self.keyboards.menu_admins
        self.send_message(user, text=text, reply_markup=keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    def edit_menu(self, user: User, message: Message):
        admin = user.is_admin
        if not admin:
            text = '<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†</b>\n\n' \
                   '' \
                   '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏, –≤—ã–±—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑–∞—Ç—å KYC—ã –æ—Ç–ª–∏—á–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ :)'
        else:
            text = '<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>'
        keyboard = self.keyboards.menu_users(config['telegram']['support_url']) if not admin else self.keyboards.menu_admins

        if message.content_type == 'text':
            self.bot.edit_message_text(chat_id=user.id, message_id=message.id, text=text, reply_markup=keyboard)
        else:
            self.delete_message(user, message)
            self.send_message(user, text=text, reply_markup=keyboard)

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª FAQ
    def edit_faq(self, user: User, message: Message):
        with open('faq.txt', encoding='utf-8') as file:
            text = file.read()
            keyboard = self.keyboards.back_to_menu
            self.edit_message(user, message, text=text, reply_markup=keyboard, disable_web_page_preview=True)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    def edit_platforms(self, user: User, message):
        platforms = kyc.get_platform_list()
        keyboard = self.keyboards.generate_platforms_keyboard(platforms)

        text = '<b>üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã üåê</b>\n\n' \
               '' \
               '–ó–¥–µ—Å—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n' \
               '' \
               '–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏–∑ —Å–ø–∏—Å–∫–∞'
        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è platform_id
    def edit_accounts(self, user: User, message, platform_id):
        platform = kyc.get_platform_by_id(platform_id)

        if not platform:
            keyboard = self.keyboards.back_to_platforms
            text = f'–í—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ'
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        accounts = kyc.get_accounts_by_platform_id(platform_id)
        keyboard = self.keyboards.generate_accounts_keyboard(accounts)

        text = f'<b>üë§ –í–∏–¥—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ üë§</b>\n\n' \
               f'' \
               f'–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã <b>{platform.name}</b>\n\n' \
               f'' \
               f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞'
        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ account_id
    def edit_account_type(self, user, message, account_id):
        account = kyc.get_account_by_id(account_id)

        if not account:
            keyboard = self.keyboards.back_to_platforms
            text = f'–î–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ'
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        platform = kyc.get_platform_by_id(platform_id=account.platform_id)
        keyboard = self.keyboards.generate_account_keyboard(account)

        text = f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n' \
               f'' \
               f'<b>üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform.name}\n' \
               f'<b>üë§ –í–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account.name}\n\n' \
               f'' \
               f'<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {account.price:.2f}$\n'
        if account.min_price:
            text += f'<b>üî• –ú–∏–Ω. –∑–∞–∫–∞–∑:</b> {account.min_price:.2f}$\n'

        text += f'\n{account.description}'

        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –ù—É–∂–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", –≥–æ—Ç–æ–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –¥–ª—è –∑–∞–∫–∞–∑–∞
    def start_order(self, user, message, account_id, username):
        account = kyc.get_account_by_id(account_id)

        if not account:
            keyboard = self.keyboards.back_to_platforms
            text = f'–î–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ'
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        if not username:
            text = '<b>‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó</b>\n\n' \
                   '–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å <b>username</b>. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.\n\n' \
                   '–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –¥–æ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è <b>–ù–ï–õ–¨–ó–Ø</b> –º–µ–Ω—è—Ç—å username, —Ç–∞–∫ –∫–∞–∫ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –í–∞—Å –Ω–∞–π—Ç–∏.\n\n' \
                   '<b>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è username —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:</b>\n' \
                   '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å -> –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            keyboard = self.keyboards.generate_back_to_account_button(account=account)
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        platform = kyc.get_platform_by_id(account.platform_id)

        data = {
            'account_id': account_id,
            'amount': None,
            'order': {
                'platform': platform.name,
                'account': account.name
            },
            'payment': {
                'network': None,
                'currency': None,
                'wallet': None,
                'value': None
            }
        }

        self.delete_message(user, message)

        user.update_status('order_count')
        user.update_data(data)

        text = f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å <b>[{platform.name} | {account.name}]</b>\n\n' \
               f'–°—Ç–æ–∏–º–æ—Å—Ç—å - <b>${account.price:.2f} –∑–∞ —à—Ç—É–∫—É</b>\n\n' \
               f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.'
        keyboard = self.keyboards.cancel

        self.send_message(user, text=text, reply_markup=keyboard)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    def get_order_amount(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.cancel_order(user, message)
            return

        try:
            amount = abs(int(message.text))
        except ValueError:
            text = '–î–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
        else:
            if not amount:
                text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º'
                keyboard = self.keyboards.cancel
                self.send_message(user, text=text, reply_markup=keyboard)
                return

            account = kyc.get_account_by_id(user.data['account_id'])

            if not account:
                self.reload_user(user)
                self.remove_keyboard(user)
                keyboard = self.keyboards.back_to_platforms
                text = '–¢–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–æ–±–∏—Ä–∞–ª–∏—Å—å –∑–∞–∫–∞–∑–∞—Ç—å, –±—ã–ª —É–¥–∞–ª—ë–Ω'
                self.send_message(user, text=text, reply_markup=keyboard)
                return

            platform = kyc.get_platform_by_id(account.platform_id)

            if account.min_price > amount * account.price:
                text = f'–ù–∞ –ø–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏: <b>${account.min_price:.2f}</b>.\n\n' \
                       f'<b>{amount}</b> –µ–¥–∏–Ω–∏—Ü –ø–∞–∫–µ—Ç–∞ –±—É–¥—É—Ç —Å—Ç–æ–∏—Ç—å <b>${account.price * amount:.2f}</b>, —á—Ç–æ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã.'
                keyboard = self.keyboards.cancel
                self.send_message(user, text=text, reply_markup=keyboard)
                return

            user.data['amount'] = amount
            user.data['payment']['value'] = round(amount * account.price, 2)
            user.update_data(user.data)

            user.update_status('choose_currency')
            self.remove_keyboard(user)

            text = f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å <b>{amount}</b> –µ–¥–∏–Ω–∏—Ü <b>[{platform.name} | {account.name}]</b>\n\n' \
                   f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: <b>${account.price * amount:.2f}</b>\n\n' \
                   f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω –∑–∞–∫–∞–∑</b>'
            keyboard = self.keyboards.currency
            self.send_message(user, text=text, reply_markup=keyboard)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É –∏ —Å–µ—Ç—å, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    def get_order_currency(self, user, message, cdata):
        if cdata == 'cancel_order':
            self.cancel_order(user, message)
            return

        if cdata == 'back':
            amount = user.data['amount']
            account = kyc.get_account_by_id(user.data['account_id'])
            if not account:
                self.reload_user(user)
                text = '–¢–æ–≤–∞—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏, –±—ã–ª —É–¥–∞–ª—ë–Ω'
                keyboard = self.keyboards.back_to_platforms
                self.edit_message(user, message, text=text, reply_markup=keyboard)
                return
            platform = kyc.get_platform_by_id(account.platform_id)

            text = f'–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–∫–∞–∑–∞—Ç—å <b>{amount}</b> –µ–¥–∏–Ω–∏—Ü <b>[{platform.name} | {account.name}]</b>\n\n' \
                   f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: <b>${account.price * amount:.2f}</b>\n\n' \
                   f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ–ø–ª–∞—á–µ–Ω –∑–∞–∫–∞–∑</b>'
            keyboard = self.keyboards.currency

            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        if cdata in ('usdt', 'usdc', 'busd'):
            if cdata == 'usdt':
                text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ <b>USDT</b>'
                keyboard = self.keyboards.usdt_networks
            elif cdata == 'usdc':
                text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ <b>USDC</b>'
                keyboard = self.keyboards.usdc_networks
            else:
                text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ <b>BUSD</b>'
                keyboard = self.keyboards.busd_networks

            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        if fullmatch(r'(usdt|usdc|busd)_(erc20|trc20|bep20)', cdata):
            currency, network = fullmatch(r'(usdt|usdc|busd)_(erc20|trc20|bep20)', cdata).groups()

            user.data['payment']['network'] = network
            user.data['payment']['currency'] = currency

            user.update_data(user.data)
            user.update_status('confirm')

            account = kyc.get_account_by_id(user.data['account_id'])

            if not account:
                if not account:
                    self.reload_user(user)
                    text = '–¢–æ–≤–∞—Ä, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ä–∞–±–æ—Ç–∞–ª–∏, –±—ã–ª —É–¥–∞–ª—ë–Ω'
                    keyboard = self.keyboards.back_to_platforms
                    self.edit_message(user, message, text=text, reply_markup=keyboard)
                    return

            platform = kyc.get_platform_by_id(account.platform_id)

            price = round(account.price * user.data['amount'], 2)

            text = f'<b>‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚ö†Ô∏è</b>\n\n' \
                   f'<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform.name}\n\n' \
                   f'<b>–í–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account.name}\n\n' \
                   f'<b>–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</b> ${account.price:.2f}\n\n' \
                   f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {user.data["amount"]}\n\n' \
                   f'<b>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${price:.2f}\n\n' \
                   f'<b>–í–∞–ª—é—Ç–∞ –æ–ø–ª–∞—Ç—ã:</b> {user.data["payment"]["currency"].upper()}\n\n' \
                   f'<b>–°–µ—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {user.data["payment"]["network"].upper()}\n\n' \
                   f'<b>‚ö†Ô∏è –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ ‚ö†Ô∏è</b>'
            keyboard = self.keyboards.confirm_order

            self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    def confirm_order(self, user: User, message: Message, cdata):
        if cdata == 'cancel':
            self.cancel_order(user, message)
            return

        if cdata == 'confirm':
            if not message.from_user.username:
                text = '<b>‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó</b>\n\n' \
                       '–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å <b>username</b>. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.\n\n' \
                       '–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –¥–æ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è <b>–ù–ï–õ–¨–ó–Ø</b> –º–µ–Ω—è—Ç—å username, —Ç–∞–∫ –∫–∞–∫ –≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –í–∞—Å –Ω–∞–π—Ç–∏.\n\n' \
                       '<b>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è username —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:</b>\n' \
                       '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ -> –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å -> –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                keyboard = self.keyboards.generate_back_to_account_button(account_id=user.data['account_id'])
                self.reload_user(user)
                self.edit_message(user, message, text=text, reply_markup=keyboard)
                return

            text = '<b>‚ùó–í–Ω–∏–º–∞–Ω–∏–µ‚ùó</b>\n\n' \
                   '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∏ –¥–æ –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è <b>–ù–ï–õ–¨–ó–Ø</b> –º–µ–Ω—è—Ç—å —Å–≤–æ–π username.\n\n' \
                   '–ï—Å–ª–∏ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –º—ã –Ω–µ —Å–º–æ–∂–µ–º —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ –∏ –¥—Ä—É–≥–∏—Ö –Ω—é–∞–Ω—Å–æ–≤.'
            keyboard = self.keyboards.confirm_username

            self.edit_message(user, message, text=text, reply_markup=keyboard)

        elif cdata == 'confirm_username':
            account = kyc.get_account_by_id(user.data['account_id'])

            if not account:
                self.reload_user(user)
                text = '–¢–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –í—ã –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–∫–∞–∑–∞—Ç—å, –±—ã–ª —É–¥–∞–ª—ë–Ω.'
                keyboard = self.keyboards.back_to_platforms
                self.edit_message(user, message, text=text, reply_markup=keyboard)
                return

            user.update_status('paying')
            currency = user.data['payment']['currency']
            network = user.data['payment']['network']

            if network == 'trc20':
                address, phrase = tron.create_wallet()
            elif network == 'erc20':
                address, phrase = erc.create_wallet()
            else:
                address, phrase = bsc.create_wallet()

            user.data['payment']['wallet'] = address
            user.update_data(user.data)

            value = account.price * user.data['amount']
            self.wallets.send_wallet(user.data['payment']['network'], user.data['payment']['currency'], phrase, address, value)

            text = f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:\n\n' \
                   f'–í–∞–ª—é—Ç–∞: <b>{currency.upper()}</b>\n' \
                   f'–°–µ—Ç—å: <b>{network.upper()}</b>\n' \
                   f'C—É–º–º–∞: <b>{value} {currency.upper()}</b>\n\n' \
                   f'<code>{address}</code>\n\n' \
                   f'‚ö†Ô∏è <i>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ <b>{currency.upper()}</b> —á–µ—Ä–µ–∑ —Å–µ—Ç—å <b>{network.upper()}</b>, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã</i>'
            keyboard = self.keyboards.check_order

            self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞
    def payment(self, user: User, call, cdata, call_id):
        message = call.message
        if cdata == 'cancel_order':
            text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?\n\n' \
                   '–ï—Å–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑, –∫ –Ω–µ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.'
            keyboard = self.keyboards.cancel_order
            self.edit_message(user, message, text=text, reply_markup=keyboard)
        elif cdata == 'cancel':
            text = '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω'
            keyboard = self.keyboards.generate_back_to_account_button(account_id=user.data['account_id'])
            self.reload_user(user)
            self.edit_message(user, message, text=text, reply_markup=keyboard)
        elif cdata == 'back':
            currency = user.data['payment']['currency']
            network = user.data['payment']['network']
            address = user.data['payment']['wallet']
            value = user.data['payment']['value']

            text = f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:\n\n' \
                   f'–í–∞–ª—é—Ç–∞: <b>{currency.upper()}</b>\n' \
                   f'–°–µ—Ç—å: <b>{network.upper()}</b>\n' \
                   f'C—É–º–º–∞: <b>{value} {currency.upper()}</b>\n\n' \
                   f'<code>{address}</code>\n\n' \
                   f'‚ö†Ô∏è <i>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ <b>{currency.upper()}</b> —á–µ—Ä–µ–∑ —Å–µ—Ç—å <b>{network.upper()}</b>, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã</i>'
            keyboard = self.keyboards.check_order

            self.edit_message(user, message, text=text, reply_markup=keyboard)
        elif cdata == 'check':
            currency = user.data['payment']['currency']
            network = user.data['payment']['network']
            address = user.data['payment']['wallet']
            value = user.data['payment']['value']

            if network == 'erc20':
                if currency == 'usdt':
                    contract = erc.usdt
                elif currency == 'usdc':
                    contract = erc.usdc
                else:
                    contract = erc.busd
                status = erc.get_transaction(value, contract, address)
            elif network == 'trc20':
                if currency == 'usdt':
                    contract = tron.usdt
                else:
                    contract = tron.usdc
                status = tron.get_transaction(value, contract, address)
            else:
                if currency == 'usdt':
                    contract = bsc.usdt
                elif currency == 'usdc':
                    contract = bsc.usdc
                else:
                    contract = bsc.busd
                status = bsc.get_transaction(value, contract, address)

            if status is None:
                self.bot.answer_callback_query(callback_query_id=call_id,
                                               text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.')
            elif status is False:
                self.bot.answer_callback_query(callback_query_id=call_id,
                                               text='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.',
                                               show_alert=True)
            else:
                udata_copy = user.data
                self.reload_user(user)

                text = '‚úîÔ∏è <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω</b> ‚úîÔ∏è\n\n' \
                       '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω. –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –º—ã —Å –í–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏.\n\n' \
                       '–ú—ã –≤—ã—Ä–∞–∂–∞–µ–º –í–∞–º –≥–ª—É–±–æ—á–∞–π—à—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –ø–æ–∫—É–ø–∫—É. –ú—ã –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏.\n\n' \
                       '‚ö†Ô∏è <i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –º–µ–Ω—è–π—Ç–µ —Å–≤–æ–π username –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ï—Å–ª–∏ –í—ã —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç–µ, –º—ã –Ω–µ —Å–º–æ–∂–µ–º —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞.</i>'

                keyboard = self.keyboards.back_to_menu

                self.edit_message(user, message, text=text, reply_markup=keyboard)

                sheets = Sheet(key=config['sheets']['key'], token='key.json')

                while 1:
                    if not self.busy:
                        self.busy = True
                        order = {
                            'username': call.from_user.username,
                            'platform': udata_copy['order']['platform'],
                            'account': udata_copy['order']['account'],
                            'value': udata_copy['payment']['value'],
                            'amount': udata_copy['amount']
                        }
                        sheets.insert_order(**order)
                        self.busy = False
                        break

    # –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ
    def change_faq(self, user: User, message: Message):
        user.update_status('edit_faq')
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ FAQ.\n\n–õ—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫—Ä–æ–º–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫,' \
               ' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.'
        keyboard = self.keyboards.cancel
        self.delete_message(user, message)
        self.send_message(user, text=text, reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ –∏ –∏–∑–º–µ–Ω—è–µ—Ç –µ–≥–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ
    def get_new_faq(self, user: User, message: Message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.cancel_action(user)
            return

        new_text = message.html_text
        with open('faq.txt', 'w', encoding='utf-8') as file:
            file.write(new_text)
            file.close()

        text = '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚úÖ'
        keyboard = self.keyboards.back_to_menu

        user.update_status('menu')
        self.remove_keyboard(user)
        self.send_message(user, text=text, reply_markup=keyboard)

    # –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–ø–ø–æ—Ä—Ç–∞
    def change_support(self, user: User, message: Message):
        user.update_status('edit_support')
        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>Support</b>'
        keyboard = self.keyboards.cancel
        self.delete_message(user, message)
        self.send_message(user, text=text, reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É —Å–∞–ø–ø–æ—Ä—Ç–∞
    def get_new_support(self, user: User, message: Message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.cancel_action(user)
            return

        url = message.text
        try:
            get(url)
        except Exception:
            text = '–¢–æ, —á—Ç–æ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π, –∏–ª–∏ —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        config['telegram']['support_url'] = url
        with open('config.ini', 'w', encoding='utf-8') as file:
            config.write(file)

        text = '–ù–æ–≤—ã–π —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚úÖ'
        keyboard = self.keyboards.back_to_menu

        user.update_status('menu')
        self.remove_keyboard(user)
        self.send_message(user, text=text, reply_markup=keyboard)

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
    def admin_editor(self, user, message):
        text = '<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ'
        keyboard = self.keyboards.admin_editor
        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    def admin_list(self, user, message):
        text = '<b>–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.'
        admin_list = admin.get_admin_list()
        keyboard = self.keyboards.generate_admin_list(admin_list)
        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    def delete_admin(self, user, message, admin_id):
        adm = admin.get_admin_by_id(admin_id)
        text = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {adm.name}?'
        keyboard = self.keyboards.confirm_admin_delete(admin_id)
        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    def confirm_delete_admin(self, user, message, call_id, admin_id):
        admin_user = User(admin_id)
        admin_user.switch_admin()
        self.bot.answer_callback_query(callback_query_id=call_id, text=f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω')
        self.admin_list(user, message)

    def create_admin(self, user, message):
        user.update_status('creating_admin')
        user.update_data({'admin_id': None})
        text = '–ü—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç id –±—É–¥—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n' \
               '' \
               '–£–∑–Ω–∞—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞ @username_to_id_bot'
        keyboard = self.keyboards.cancel
        self.delete_message(user, message)
        self.send_message(user, text=text, reply_markup=keyboard)

    def get_new_admin_id(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.back_to_admin_editor
            self.reload_user(user)
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        try:
            int(message.text)
        except ValueError:
            text = 'id –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        user.data['admin_id'] = int(message.text)
        user.update_data(user.data)

        user.update_status(status='creating_admin_name')
        text = f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ <code>{int(message.text)}</code>'
        keyboard = self.keyboards.cancel

        self.send_message(user, text=text, reply_markup=keyboard)

    def get_new_admin_name(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.back_to_admin_editor
            self.reload_user(user)
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        name = message.text.replace('\n', ' ')
        admin_id = user.data['admin_id']
        self.reload_user(user)
        admin.create_admin(admin_id, name)

        self.remove_keyboard(user)
        text = f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{name}</b> —Å id <b>{admin_id}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'
        keyboard = self.keyboards.back_to_admin_editor
        self.send_message(user, text=text, reply_markup=keyboard)

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –∞–¥–º–∏–Ω–∞
    def kyc_editor_platforms(self, user, message):
        platforms = kyc.get_platform_list()

        text = '<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KYC</b>'
        keyboard = self.keyboards.generate_platforms_keyboard(platforms, 1)

        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ id –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    def kyc_editor_accounts(self, user, message, platform_id):
        platform = kyc.get_platform_by_id(platform_id)

        if not platform:
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        accounts = kyc.get_accounts_by_platform_id(platform_id)

        text = f'<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KYC [{platform.name}]</b>'
        keyboard = self.keyboards.generate_accounts_keyboard(accounts, platform_id)

        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    def kyc_editor_account(self, user, message, account_id):
        account = kyc.get_account_by_id(account_id)

        if not account:
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        platform = kyc.get_platform_by_id(account.platform_id)

        text = f'<b>–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n' \
               f'' \
               f'<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {platform.name}\n' \
               f'<b>–í–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞:</b> {account.name}\n\n' \
               f'' \
               f'<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {account.price:.2f}$\n' \
               f'<b>–ú–∏–Ω. —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {account.min_price:.2f}$\n\n' \
               f'' \
               f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {account.description}\n\n' \
               f'' \
               f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ'
        keyboard = self.keyboards.generate_kyc_editor(account)

        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –ì–æ—Ç–æ–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–º–µ–Ω–µ –∏–º–µ–Ω–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ
    def start_account_name_editing(self, user, message, account_id):
        account = kyc.get_account_by_id(account_id)

        if not account:
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        user.update_status('edit_account_name')
        user.update_data({'account_id': account_id})
        self.delete_message(user, message)

        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞'
        keyboard = self.keyboards.cancel

        self.send_message(user, text=text, reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∑–∞–º–µ–Ω—è–µ—Ç –µ–≥–æ
    def edit_account_name(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.generate_back_to_account_button(account_id=user.data['account_id'])
            self.reload_user(user)
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        account = kyc.get_account_by_id(user.data['account_id'])

        if not account:
            self.remove_keyboard(user)
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        account.update_name(message.text)
        self.remove_keyboard(user)

        text = '–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'
        keyboard = self.keyboards.generate_back_to_account_button(account)

        self.reload_user(user)
        self.send_message(user, text=text, reply_markup=keyboard)

    # –ì–æ—Ç–æ–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–º–µ–Ω–µ –æ–ø–∏—Å–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ
    def start_account_description_editing(self, user, message, account_id):
        account = kyc.get_account_by_id(account_id)

        if not account:
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        user.update_status('edit_account_description')
        user.update_data({'account_id': account_id})
        self.delete_message(user, message)

        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n' \
               '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫—Ä–æ–º–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
        keyboard = self.keyboards.cancel

        self.send_message(user, text=text, reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    def edit_account_description(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.generate_back_to_account_button(account_id=user.data['account_id'])
            self.reload_user(user)
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        account = kyc.get_account_by_id(user.data['account_id'])

        if not account:
            self.remove_keyboard(user)
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        account.update_description(message.html_text)
        self.remove_keyboard(user)

        text = '–û–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'
        keyboard = self.keyboards.generate_back_to_account_button(account)

        self.reload_user(user)
        self.send_message(user, text=text, reply_markup=keyboard)

    # –ì–æ—Ç–æ–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–º–µ–Ω–µ —Ü–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—É—é
    def start_account_price_editing(self, user, message, account_id):
        account = kyc.get_account_by_id(account_id)

        if not account:
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        user.update_status('edit_account_price')
        user.update_data({'account_id': account_id})
        self.delete_message(user, message)

        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞'
        keyboard = self.keyboards.cancel

        self.send_message(user, text=text, reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—É –∞–∫–∫–∞—É–Ω—Ç–∞
    def edit_account_price(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.generate_back_to_account_button(account_id=user.data['account_id'])
            self.reload_user(user)
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        account = kyc.get_account_by_id(user.data['account_id'])

        if not account:
            self.remove_keyboard(user)
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        try:
            float(message.text)
        except ValueError:
            text = '–î–ª—è —Ü–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ü–µ–ª—ã–µ –∏–ª–∏ –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
            return
        else:
            if float(message.text) <= 0:
                text = '–¶–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤–æ–π –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'
                keyboard = self.keyboards.cancel
                self.send_message(user, text=text, reply_markup=keyboard)
                return

        account.update_price(round(float(message.text), 2))
        self.remove_keyboard(user)

        text = '–¶–µ–Ω–∞ –¥–ª—è –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!'
        keyboard = self.keyboards.generate_back_to_account_button(account)

        self.reload_user(user)
        self.send_message(user, text=text, reply_markup=keyboard)

    # –ì–æ—Ç–æ–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–∞–º–µ–Ω–µ –º–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–æ—Å–∏—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤—É—é
    def start_account_min_price_editing(self, user, message, account_id):
        account = kyc.get_account_by_id(account_id)

        if not account:
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        user.update_status('edit_account_min_price')
        user.update_data({'account_id': account_id})
        self.delete_message(user, message)

        text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n' \
               '' \
               '–ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0'
        keyboard = self.keyboards.cancel

        self.send_message(user, text=text, reply_markup=keyboard)

    # –ü–æ–ª—É—á–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é –º–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞
    def edit_account_min_price(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.generate_back_to_account_button(account_id=user.data['account_id'])
            self.reload_user(user)
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        account = kyc.get_account_by_id(user.data['account_id'])

        if not account:
            self.remove_keyboard(user)
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        try:
            float(message.text)
        except ValueError:
            text = '–î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ü–µ–ª—ã–µ –∏–ª–∏ –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
            return
        else:
            if float(message.text) < 0:
                text = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'
                keyboard = self.keyboards.cancel
                self.send_message(user, text=text, reply_markup=keyboard)
                return

        account.update_min_price(round(float(message.text), 2))
        self.remove_keyboard(user)

        text = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!'
        keyboard = self.keyboards.generate_back_to_account_button(account)

        self.reload_user(user)
        self.send_message(user, text=text, reply_markup=keyboard)

    # –ì–æ—Ç–æ–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —É–¥–∞–ª–µ–Ω–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    def delete_account(self, user, message, account_id):
        account = kyc.get_account_by_id(account_id)

        if not account:
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        platform = kyc.get_platform_by_id(account.platform_id)

        text = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞?\n\n' \
               '' \
               f'<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</b>: {platform.name}\n' \
               f'<b>–í–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞</b>: {account.name}'
        keyboard = self.keyboards.generate_delete_account(account)

        self.edit_message(user, message, text=text, reply_markup=keyboard)

    # –£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç
    def delete_account_confirm(self, user, message, account_id):
        account = kyc.get_account_by_id(account_id)

        if not account:
            self.remove_keyboard(user)
            text = '–í—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        account.remove()

        text = '–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!'
        keyboard = self.keyboards.back_to_platforms

        self.edit_message(user, message, text=text, reply_markup=keyboard)

    def create_platform(self, user, message):
        user.update_status('creating_platform')

        self.delete_message(user, message)
        text = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã'
        keyboard = self.keyboards.cancel
        self.send_message(user, text=text, reply_markup=keyboard)

    def get_new_platform_name(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.back_to_platforms
            self.reload_user(user)
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        self.reload_user(user)
        self.remove_keyboard(user)

        name = message.text.replace('\n', ' ')
        kyc.create_platform(name)

        text = f'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ <b>{name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!'
        keyboard = self.keyboards.back_to_platforms
        self.send_message(user, text=text, reply_markup=keyboard)

    def delete_platform(self, user, message, platform_id):
        platform = kyc.get_platform_by_id(platform_id)

        if not platform:
            text = '–≠—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        text = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É <b>{platform.name}</b>?\n\n' \
               f'' \
               f'–í–º–µ—Å—Ç–µ —Å —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–∏–¥—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç.'
        keyboard = self.keyboards.generate_delete_platform(platform)
        self.edit_message(user, message, text=text, reply_markup=keyboard)

    def delete_platform_confirm(self, user, message, platform_id):
        platform = kyc.get_platform_by_id(platform_id)

        if not platform:
            text = '–≠—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        platform.remove()

        text = f'–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ <b>{platform.name}</b> –∏ –≤—Å–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –µ–π –∞–∫–∫–∞—É–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.'
        keyboard = self.keyboards.back_to_platforms

        self.edit_message(user, message, text=text, reply_markup=keyboard)

    def create_account(self, user, message, platform_id):
        platform = kyc.get_platform_by_id(platform_id)

        if not platform:
            text = '–≠—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            keyboard = self.keyboards.back_to_platforms
            self.edit_message(user, message, text=text, reply_markup=keyboard)
            return

        user.update_status('create_account')
        data = {
            'platform': platform.id,
            'name': None,
            'price': None,
            'min_price': 0,
            'description': None
        }
        user.update_data(data)

        text = f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n' \
               f'' \
               f'<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</b>: {platform.name}\n' \
               f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: <i>–ù–µ—Ç</i>\n\n' \
               f'' \
               f'<b>–¶–µ–Ω–∞</b>: <i>–ù–µ—Ç</i>\n' \
               f'<b>–ú–∏–Ω. –∑–∞–∫–∞–∑</b>: 0$\n\n' \
               f'' \
               f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: <i>–ù–µ—Ç</i>\n'
        keyboard = self.keyboards.account_creator

        self.edit_message(user, message, text=text, reply_markup=keyboard)

    def account_creator(self, user, message, call_id, cdata):
        if cdata == 'cancel':
            platform_id = user.data['platform']
            self.reload_user(user)
            self.kyc_editor_accounts(user, message, platform_id)
        elif cdata == 'name':
            user.update_status('create_account_name')
            self.delete_message(user, message)
            text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
        elif cdata == 'description':
            user.update_status('create_account_description')
            self.delete_message(user, message)
            text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n' \
                   '' \
                   '–ü–æ–¥–¥—Ä–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫—Ä–æ–º–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
        elif cdata == 'price':
            user.update_status('create_account_price')
            self.delete_message(user, message)
            text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç —Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
        elif cdata == 'min_price':
            user.update_status('create_account_min_price')
            self.delete_message(user, message)
            text = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞\n\n' \
                   '' \
                   '–ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 0'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
        elif cdata == 'create':
            if not user.data['name'] or not user.data['description'] or not user.data['price']:
                text = '–ù–æ–≤—ã–π –≤–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –∏–º–µ–Ω–∏, –æ–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ —Ü–µ–Ω—ã'
                self.bot.answer_callback_query(callback_query_id=call_id, text=text, show_alert=True)
                return

            platform = kyc.get_platform_by_id(user.data['platform'])

            if not platform:
                self.reload_user(user)
                text = '–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç, –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                keyboard = self.keyboards.back_to_platforms
                self.edit_message(user, message, text=text, reply_markup=keyboard)
                return

            kyc.create_account(user.data)

            self.reload_user(user)
            text = '–ù–æ–≤—ã–π –≤–∏–¥ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!'
            keyboard = self.keyboards.back_to_platform(platform)
            self.edit_message(user, message, text=text, reply_markup=keyboard)

        elif cdata == 'back':
            platform = kyc.get_platform_by_id(user.data['platform'])

            if not platform:
                self.reload_user(user)
                text = '–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç, –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                keyboard = self.keyboards.back_to_platforms
                self.edit_message(user, message, text=text, reply_markup=keyboard)
                return

            text = f'<b>–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n' \
                   f'' \
                   f'<b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</b>: {platform.name}\n' \
                   f'<b>–ù–∞–∑–≤–∞–Ω–∏–µ</b>: {user.data["name"] if user.data["name"] else "<i>–ù–µ—Ç</i>"}\n\n' \
                   f'' \
                   f'<b>–¶–µ–Ω–∞</b>: {str(user.data["price"]) + "$" if user.data["price"] else "<i>–ù–µ—Ç</i>"}\n' \
                   f'<b>–ú–∏–Ω. –∑–∞–∫–∞–∑</b>: {user.data["min_price"]}$\n\n' \
                   f'' \
                   f'<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {user.data["description"] if user.data["description"] else "<i>–ù–µ—Ç</i>"}\n'
            keyboard = self.keyboards.account_creator
            self.edit_message(user, message, text=text, reply_markup=keyboard)

    def get_new_account_name(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.back_to_creator
            user.update_status('create_account')
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        name = message.text.replace('\n', ' ')

        user.data['name'] = name
        user.update_data(user.data)
        user.update_status('create_account')

        self.remove_keyboard(user)
        text = '–ò–º—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'
        keyboard = self.keyboards.back_to_creator
        self.send_message(user, text=text, reply_markup=keyboard)

    def get_new_account_description(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.back_to_creator
            user.update_status('create_account')
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        description = message.html_text

        user.data['description'] = description
        user.update_data(user.data)
        user.update_status('create_account')

        self.remove_keyboard(user)
        text = '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'
        keyboard = self.keyboards.back_to_creator
        self.send_message(user, text=text, reply_markup=keyboard)

    def get_new_account_price(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.back_to_creator
            user.update_status('create_account')
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        try:
            float(message.text)
        except ValueError:
            text = '–î–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ü–µ–ª—ã–µ –∏–ª–∏ –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
            return
        else:
            if float(message.text) <= 0:
                text = '–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤–æ–π –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'
                keyboard = self.keyboards.cancel
                self.send_message(user, text=text, reply_markup=keyboard)
                return

        price = round(float(message.text), 2)

        user.data['price'] = price
        user.update_data(user.data)
        user.update_status('create_account')

        self.remove_keyboard(user)
        text = '–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'
        keyboard = self.keyboards.back_to_creator
        self.send_message(user, text=text, reply_markup=keyboard)

    def get_new_account_min_price(self, user, message):
        if message.text == '–û—Ç–º–µ–Ω–∞ ‚ùå':
            self.remove_keyboard(user)
            text = '–û—Ç–º–µ–Ω–µ–Ω–æ'
            keyboard = self.keyboards.back_to_creator
            user.update_status('create_account')
            self.send_message(user, text=text, reply_markup=keyboard)
            return

        try:
            float(message.text)
        except ValueError:
            text = '–î–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ü–µ–ª—ã–µ –∏–ª–∏ –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞'
            keyboard = self.keyboards.cancel
            self.send_message(user, text=text, reply_markup=keyboard)
            return
        else:
            if float(message.text) < 0:
                text = '–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π'
                keyboard = self.keyboards.cancel
                self.send_message(user, text=text, reply_markup=keyboard)
                return

        price = round(float(message.text), 2)

        user.data['min_price'] = price
        user.update_data(user.data)
        user.update_status('create_account')

        self.remove_keyboard(user)
        text = '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'
        keyboard = self.keyboards.back_to_creator
        self.send_message(user, text=text, reply_markup=keyboard)